// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package github

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson619ac83dDecodeGitTcpDirectKayosUrastarGithub(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "id":
			out.Id = int(in.Int())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "html_url":
			out.HTMLURL = string(in.String())
		case "followers_url":
			out.FollowersUrl = string(in.String())
		case "following_url":
			out.FollowingUrl = string(in.String())
		case "gists_url":
			out.GistsUrl = string(in.String())
		case "starred_url":
			out.StarredUrl = string(in.String())
		case "subscriptions_url":
			out.SubscriptionsUrl = string(in.String())
		case "organizations_url":
			out.OrganizationsUrl = string(in.String())
		case "repos_url":
			out.ReposUrl = string(in.String())
		case "events_url":
			out.EventsUrl = string(in.String())
		case "received_events_url":
			out.ReceivedEventsUrl = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "site_admin":
			out.SiteAdmin = bool(in.Bool())
		case "name":
			out.Name = string(in.String())
		case "company":
			out.Company = string(in.String())
		case "blog":
			out.Blog = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "email":
			if m, ok := out.Email.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Email.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Email = in.Interface()
			}
		case "hireable":
			if m, ok := out.Hireable.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Hireable.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Hireable = in.Interface()
			}
		case "bio":
			if m, ok := out.Bio.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Bio.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Bio = in.Interface()
			}
		case "twitter_username":
			out.TwitterUsername = string(in.String())
		case "public_repos":
			out.PublicRepos = int(in.Int())
		case "public_gists":
			out.PublicGists = int(in.Int())
		case "followers":
			out.Followers = int(in.Int())
		case "following":
			out.Following = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson619ac83dEncodeGitTcpDirectKayosUrastarGithub(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Login != "" {
		const prefix string = ",\"login\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Id))
	}
	if in.AvatarURL != "" {
		const prefix string = ",\"avatar_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvatarURL))
	}
	if in.Url != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	if in.HTMLURL != "" {
		const prefix string = ",\"html_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HTMLURL))
	}
	if in.FollowersUrl != "" {
		const prefix string = ",\"followers_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FollowersUrl))
	}
	if in.FollowingUrl != "" {
		const prefix string = ",\"following_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FollowingUrl))
	}
	if in.GistsUrl != "" {
		const prefix string = ",\"gists_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GistsUrl))
	}
	if in.StarredUrl != "" {
		const prefix string = ",\"starred_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StarredUrl))
	}
	if in.SubscriptionsUrl != "" {
		const prefix string = ",\"subscriptions_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubscriptionsUrl))
	}
	if in.OrganizationsUrl != "" {
		const prefix string = ",\"organizations_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrganizationsUrl))
	}
	if in.ReposUrl != "" {
		const prefix string = ",\"repos_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReposUrl))
	}
	if in.EventsUrl != "" {
		const prefix string = ",\"events_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventsUrl))
	}
	if in.ReceivedEventsUrl != "" {
		const prefix string = ",\"received_events_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReceivedEventsUrl))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.SiteAdmin {
		const prefix string = ",\"site_admin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SiteAdmin))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Company != "" {
		const prefix string = ",\"company\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Company))
	}
	if in.Blog != "" {
		const prefix string = ",\"blog\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Blog))
	}
	if in.Location != "" {
		const prefix string = ",\"location\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Location))
	}
	if in.Email != nil {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Email.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Email.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Email))
		}
	}
	if in.Hireable != nil {
		const prefix string = ",\"hireable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Hireable.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Hireable.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Hireable))
		}
	}
	if in.Bio != nil {
		const prefix string = ",\"bio\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Bio.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Bio.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Bio))
		}
	}
	if in.TwitterUsername != "" {
		const prefix string = ",\"twitter_username\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TwitterUsername))
	}
	if in.PublicRepos != 0 {
		const prefix string = ",\"public_repos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PublicRepos))
	}
	if in.PublicGists != 0 {
		const prefix string = ",\"public_gists\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PublicGists))
	}
	if in.Followers != 0 {
		const prefix string = ",\"followers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Followers))
	}
	if in.Following != 0 {
		const prefix string = ",\"following\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Following))
	}
	if true {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson619ac83dEncodeGitTcpDirectKayosUrastarGithub(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson619ac83dEncodeGitTcpDirectKayosUrastarGithub(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson619ac83dDecodeGitTcpDirectKayosUrastarGithub(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson619ac83dDecodeGitTcpDirectKayosUrastarGithub(l, v)
}
func easyjson619ac83dDecodeGitTcpDirectKayosUrastarGithub1(in *jlexer.Lexer, out *Stars) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Stars, 0, 0)
			} else {
				*out = Stars{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 struct {
				ID       int    `json:"id"`
				NodeID   string `json:"node_id"`
				Name     string `json:"name"`
				FullName string `json:"full_name"`
				Private  bool   `json:"private"`
				Owner    struct {
					Login             string `json:"login"`
					ID                int    `json:"id"`
					AvatarURL         string `json:"avatar_url"`
					URL               string `json:"url"`
					HTMLURL           string `json:"html_url"`
					FollowersURL      string `json:"followers_url"`
					FollowingURL      string `json:"following_url"`
					GistsURL          string `json:"gists_url"`
					StarredURL        string `json:"starred_url"`
					SubscriptionsURL  string `json:"subscriptions_url"`
					OrganizationsURL  string `json:"organizations_url"`
					ReposURL          string `json:"repos_url"`
					EventsURL         string `json:"events_url"`
					ReceivedEventsURL string `json:"received_events_url"`
					Type              string `json:"type"`
					SiteAdmin         bool   `json:"site_admin"`
				} `json:"owner"`
				HTMLURL          string      `json:"html_url"`
				Description      *string     `json:"description"`
				Fork             bool        `json:"fork"`
				URL              string      `json:"url"`
				ForksURL         string      `json:"forks_url"`
				KeysURL          string      `json:"keys_url"`
				CollaboratorsURL string      `json:"collaborators_url"`
				TeamsURL         string      `json:"teams_url"`
				HooksURL         string      `json:"hooks_url"`
				IssueEventsURL   string      `json:"issue_events_url"`
				EventsURL        string      `json:"events_url"`
				AssigneesURL     string      `json:"assignees_url"`
				BranchesURL      string      `json:"branches_url"`
				TagsURL          string      `json:"tags_url"`
				BlobsURL         string      `json:"blobs_url"`
				GitTagsURL       string      `json:"git_tags_url"`
				GitRefsURL       string      `json:"git_refs_url"`
				TreesURL         string      `json:"trees_url"`
				StatusesURL      string      `json:"statuses_url"`
				LanguagesURL     string      `json:"languages_url"`
				StargazersURL    string      `json:"stargazers_url"`
				ContributorsURL  string      `json:"contributors_url"`
				SubscribersURL   string      `json:"subscribers_url"`
				SubscriptionURL  string      `json:"subscription_url"`
				CommitsURL       string      `json:"commits_url"`
				GitCommitsURL    string      `json:"git_commits_url"`
				CommentsURL      string      `json:"comments_url"`
				IssueCommentURL  string      `json:"issue_comment_url"`
				ContentsURL      string      `json:"contents_url"`
				CompareURL       string      `json:"compare_url"`
				MergesURL        string      `json:"merges_url"`
				ArchiveURL       string      `json:"archive_url"`
				DownloadsURL     string      `json:"downloads_url"`
				IssuesURL        string      `json:"issues_url"`
				PullsURL         string      `json:"pulls_url"`
				MilestonesURL    string      `json:"milestones_url"`
				NotificationsURL string      `json:"notifications_url"`
				LabelsURL        string      `json:"labels_url"`
				ReleasesURL      string      `json:"releases_url"`
				DeploymentsURL   string      `json:"deployments_url"`
				CreatedAt        time.Time   `json:"created_at"`
				UpdatedAt        time.Time   `json:"updated_at"`
				PushedAt         time.Time   `json:"pushed_at"`
				GitURL           string      `json:"git_url"`
				SSHURL           string      `json:"ssh_url"`
				CloneURL         string      `json:"clone_url"`
				SvnURL           string      `json:"svn_url"`
				Homepage         *string     `json:"homepage"`
				Size             int         `json:"size"`
				StargazersCount  int         `json:"stargazers_count"`
				WatchersCount    int         `json:"watchers_count"`
				Language         *string     `json:"language"`
				HasIssues        bool        `json:"has_issues"`
				HasProjects      bool        `json:"has_projects"`
				HasDownloads     bool        `json:"has_downloads"`
				HasWiki          bool        `json:"has_wiki"`
				HasPages         bool        `json:"has_pages"`
				ForksCount       int         `json:"forks_count"`
				MirrorURL        interface{} `json:"mirror_url"`
				Archived         bool        `json:"archived"`
				Disabled         bool        `json:"disabled"`
				OpenIssuesCount  int         `json:"open_issues_count"`
				License          *struct {
					Key    string  `json:"key"`
					Name   string  `json:"name"`
					SpdxID string  `json:"spdx_id"`
					URL    *string `json:"url"`
					NodeID string  `json:"node_id"`
				} `json:"license"`
				AllowForking  bool     `json:"allow_forking"`
				IsTemplate    bool     `json:"is_template"`
				Topics        []string `json:"topics"`
				Visibility    string   `json:"visibility"`
				Forks         int      `json:"forks"`
				OpenIssues    int      `json:"open_issues"`
				Watchers      int      `json:"watchers"`
				DefaultBranch string   `json:"default_branch"`
			}
			easyjson619ac83dDecode(in, &v1)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson619ac83dEncodeGitTcpDirectKayosUrastarGithub1(out *jwriter.Writer, in Stars) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			easyjson619ac83dEncode(out, v3)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Stars) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson619ac83dEncodeGitTcpDirectKayosUrastarGithub1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stars) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson619ac83dEncodeGitTcpDirectKayosUrastarGithub1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stars) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson619ac83dDecodeGitTcpDirectKayosUrastarGithub1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stars) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson619ac83dDecodeGitTcpDirectKayosUrastarGithub1(l, v)
}
func easyjson619ac83dDecode(in *jlexer.Lexer, out *struct {
	ID       int    `json:"id"`
	NodeID   string `json:"node_id"`
	Name     string `json:"name"`
	FullName string `json:"full_name"`
	Private  bool   `json:"private"`
	Owner    struct {
		Login             string `json:"login"`
		ID                int    `json:"id"`
		AvatarURL         string `json:"avatar_url"`
		URL               string `json:"url"`
		HTMLURL           string `json:"html_url"`
		FollowersURL      string `json:"followers_url"`
		FollowingURL      string `json:"following_url"`
		GistsURL          string `json:"gists_url"`
		StarredURL        string `json:"starred_url"`
		SubscriptionsURL  string `json:"subscriptions_url"`
		OrganizationsURL  string `json:"organizations_url"`
		ReposURL          string `json:"repos_url"`
		EventsURL         string `json:"events_url"`
		ReceivedEventsURL string `json:"received_events_url"`
		Type              string `json:"type"`
		SiteAdmin         bool   `json:"site_admin"`
	} `json:"owner"`
	HTMLURL          string      `json:"html_url"`
	Description      *string     `json:"description"`
	Fork             bool        `json:"fork"`
	URL              string      `json:"url"`
	ForksURL         string      `json:"forks_url"`
	KeysURL          string      `json:"keys_url"`
	CollaboratorsURL string      `json:"collaborators_url"`
	TeamsURL         string      `json:"teams_url"`
	HooksURL         string      `json:"hooks_url"`
	IssueEventsURL   string      `json:"issue_events_url"`
	EventsURL        string      `json:"events_url"`
	AssigneesURL     string      `json:"assignees_url"`
	BranchesURL      string      `json:"branches_url"`
	TagsURL          string      `json:"tags_url"`
	BlobsURL         string      `json:"blobs_url"`
	GitTagsURL       string      `json:"git_tags_url"`
	GitRefsURL       string      `json:"git_refs_url"`
	TreesURL         string      `json:"trees_url"`
	StatusesURL      string      `json:"statuses_url"`
	LanguagesURL     string      `json:"languages_url"`
	StargazersURL    string      `json:"stargazers_url"`
	ContributorsURL  string      `json:"contributors_url"`
	SubscribersURL   string      `json:"subscribers_url"`
	SubscriptionURL  string      `json:"subscription_url"`
	CommitsURL       string      `json:"commits_url"`
	GitCommitsURL    string      `json:"git_commits_url"`
	CommentsURL      string      `json:"comments_url"`
	IssueCommentURL  string      `json:"issue_comment_url"`
	ContentsURL      string      `json:"contents_url"`
	CompareURL       string      `json:"compare_url"`
	MergesURL        string      `json:"merges_url"`
	ArchiveURL       string      `json:"archive_url"`
	DownloadsURL     string      `json:"downloads_url"`
	IssuesURL        string      `json:"issues_url"`
	PullsURL         string      `json:"pulls_url"`
	MilestonesURL    string      `json:"milestones_url"`
	NotificationsURL string      `json:"notifications_url"`
	LabelsURL        string      `json:"labels_url"`
	ReleasesURL      string      `json:"releases_url"`
	DeploymentsURL   string      `json:"deployments_url"`
	CreatedAt        time.Time   `json:"created_at"`
	UpdatedAt        time.Time   `json:"updated_at"`
	PushedAt         time.Time   `json:"pushed_at"`
	GitURL           string      `json:"git_url"`
	SSHURL           string      `json:"ssh_url"`
	CloneURL         string      `json:"clone_url"`
	SvnURL           string      `json:"svn_url"`
	Homepage         *string     `json:"homepage"`
	Size             int         `json:"size"`
	StargazersCount  int         `json:"stargazers_count"`
	WatchersCount    int         `json:"watchers_count"`
	Language         *string     `json:"language"`
	HasIssues        bool        `json:"has_issues"`
	HasProjects      bool        `json:"has_projects"`
	HasDownloads     bool        `json:"has_downloads"`
	HasWiki          bool        `json:"has_wiki"`
	HasPages         bool        `json:"has_pages"`
	ForksCount       int         `json:"forks_count"`
	MirrorURL        interface{} `json:"mirror_url"`
	Archived         bool        `json:"archived"`
	Disabled         bool        `json:"disabled"`
	OpenIssuesCount  int         `json:"open_issues_count"`
	License          *struct {
		Key    string  `json:"key"`
		Name   string  `json:"name"`
		SpdxID string  `json:"spdx_id"`
		URL    *string `json:"url"`
		NodeID string  `json:"node_id"`
	} `json:"license"`
	AllowForking  bool     `json:"allow_forking"`
	IsTemplate    bool     `json:"is_template"`
	Topics        []string `json:"topics"`
	Visibility    string   `json:"visibility"`
	Forks         int      `json:"forks"`
	OpenIssues    int      `json:"open_issues"`
	Watchers      int      `json:"watchers"`
	DefaultBranch string   `json:"default_branch"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "node_id":
			out.NodeID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "full_name":
			out.FullName = string(in.String())
		case "private":
			out.Private = bool(in.Bool())
		case "owner":
			easyjson619ac83dDecode1(in, &out.Owner)
		case "html_url":
			out.HTMLURL = string(in.String())
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "fork":
			out.Fork = bool(in.Bool())
		case "url":
			out.URL = string(in.String())
		case "forks_url":
			out.ForksURL = string(in.String())
		case "keys_url":
			out.KeysURL = string(in.String())
		case "collaborators_url":
			out.CollaboratorsURL = string(in.String())
		case "teams_url":
			out.TeamsURL = string(in.String())
		case "hooks_url":
			out.HooksURL = string(in.String())
		case "issue_events_url":
			out.IssueEventsURL = string(in.String())
		case "events_url":
			out.EventsURL = string(in.String())
		case "assignees_url":
			out.AssigneesURL = string(in.String())
		case "branches_url":
			out.BranchesURL = string(in.String())
		case "tags_url":
			out.TagsURL = string(in.String())
		case "blobs_url":
			out.BlobsURL = string(in.String())
		case "git_tags_url":
			out.GitTagsURL = string(in.String())
		case "git_refs_url":
			out.GitRefsURL = string(in.String())
		case "trees_url":
			out.TreesURL = string(in.String())
		case "statuses_url":
			out.StatusesURL = string(in.String())
		case "languages_url":
			out.LanguagesURL = string(in.String())
		case "stargazers_url":
			out.StargazersURL = string(in.String())
		case "contributors_url":
			out.ContributorsURL = string(in.String())
		case "subscribers_url":
			out.SubscribersURL = string(in.String())
		case "subscription_url":
			out.SubscriptionURL = string(in.String())
		case "commits_url":
			out.CommitsURL = string(in.String())
		case "git_commits_url":
			out.GitCommitsURL = string(in.String())
		case "comments_url":
			out.CommentsURL = string(in.String())
		case "issue_comment_url":
			out.IssueCommentURL = string(in.String())
		case "contents_url":
			out.ContentsURL = string(in.String())
		case "compare_url":
			out.CompareURL = string(in.String())
		case "merges_url":
			out.MergesURL = string(in.String())
		case "archive_url":
			out.ArchiveURL = string(in.String())
		case "downloads_url":
			out.DownloadsURL = string(in.String())
		case "issues_url":
			out.IssuesURL = string(in.String())
		case "pulls_url":
			out.PullsURL = string(in.String())
		case "milestones_url":
			out.MilestonesURL = string(in.String())
		case "notifications_url":
			out.NotificationsURL = string(in.String())
		case "labels_url":
			out.LabelsURL = string(in.String())
		case "releases_url":
			out.ReleasesURL = string(in.String())
		case "deployments_url":
			out.DeploymentsURL = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "pushed_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PushedAt).UnmarshalJSON(data))
			}
		case "git_url":
			out.GitURL = string(in.String())
		case "ssh_url":
			out.SSHURL = string(in.String())
		case "clone_url":
			out.CloneURL = string(in.String())
		case "svn_url":
			out.SvnURL = string(in.String())
		case "homepage":
			if in.IsNull() {
				in.Skip()
				out.Homepage = nil
			} else {
				if out.Homepage == nil {
					out.Homepage = new(string)
				}
				*out.Homepage = string(in.String())
			}
		case "size":
			out.Size = int(in.Int())
		case "stargazers_count":
			out.StargazersCount = int(in.Int())
		case "watchers_count":
			out.WatchersCount = int(in.Int())
		case "language":
			if in.IsNull() {
				in.Skip()
				out.Language = nil
			} else {
				if out.Language == nil {
					out.Language = new(string)
				}
				*out.Language = string(in.String())
			}
		case "has_issues":
			out.HasIssues = bool(in.Bool())
		case "has_projects":
			out.HasProjects = bool(in.Bool())
		case "has_downloads":
			out.HasDownloads = bool(in.Bool())
		case "has_wiki":
			out.HasWiki = bool(in.Bool())
		case "has_pages":
			out.HasPages = bool(in.Bool())
		case "forks_count":
			out.ForksCount = int(in.Int())
		case "mirror_url":
			if m, ok := out.MirrorURL.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MirrorURL.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MirrorURL = in.Interface()
			}
		case "archived":
			out.Archived = bool(in.Bool())
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "open_issues_count":
			out.OpenIssuesCount = int(in.Int())
		case "license":
			if in.IsNull() {
				in.Skip()
				out.License = nil
			} else {
				if out.License == nil {
					out.License = new(struct {
						Key    string  `json:"key"`
						Name   string  `json:"name"`
						SpdxID string  `json:"spdx_id"`
						URL    *string `json:"url"`
						NodeID string  `json:"node_id"`
					})
				}
				easyjson619ac83dDecode2(in, out.License)
			}
		case "allow_forking":
			out.AllowForking = bool(in.Bool())
		case "is_template":
			out.IsTemplate = bool(in.Bool())
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]string, 0, 4)
					} else {
						out.Topics = []string{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Topics = append(out.Topics, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "visibility":
			out.Visibility = string(in.String())
		case "forks":
			out.Forks = int(in.Int())
		case "open_issues":
			out.OpenIssues = int(in.Int())
		case "watchers":
			out.Watchers = int(in.Int())
		case "default_branch":
			out.DefaultBranch = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson619ac83dEncode(out *jwriter.Writer, in struct {
	ID       int    `json:"id"`
	NodeID   string `json:"node_id"`
	Name     string `json:"name"`
	FullName string `json:"full_name"`
	Private  bool   `json:"private"`
	Owner    struct {
		Login             string `json:"login"`
		ID                int    `json:"id"`
		AvatarURL         string `json:"avatar_url"`
		URL               string `json:"url"`
		HTMLURL           string `json:"html_url"`
		FollowersURL      string `json:"followers_url"`
		FollowingURL      string `json:"following_url"`
		GistsURL          string `json:"gists_url"`
		StarredURL        string `json:"starred_url"`
		SubscriptionsURL  string `json:"subscriptions_url"`
		OrganizationsURL  string `json:"organizations_url"`
		ReposURL          string `json:"repos_url"`
		EventsURL         string `json:"events_url"`
		ReceivedEventsURL string `json:"received_events_url"`
		Type              string `json:"type"`
		SiteAdmin         bool   `json:"site_admin"`
	} `json:"owner"`
	HTMLURL          string      `json:"html_url"`
	Description      *string     `json:"description"`
	Fork             bool        `json:"fork"`
	URL              string      `json:"url"`
	ForksURL         string      `json:"forks_url"`
	KeysURL          string      `json:"keys_url"`
	CollaboratorsURL string      `json:"collaborators_url"`
	TeamsURL         string      `json:"teams_url"`
	HooksURL         string      `json:"hooks_url"`
	IssueEventsURL   string      `json:"issue_events_url"`
	EventsURL        string      `json:"events_url"`
	AssigneesURL     string      `json:"assignees_url"`
	BranchesURL      string      `json:"branches_url"`
	TagsURL          string      `json:"tags_url"`
	BlobsURL         string      `json:"blobs_url"`
	GitTagsURL       string      `json:"git_tags_url"`
	GitRefsURL       string      `json:"git_refs_url"`
	TreesURL         string      `json:"trees_url"`
	StatusesURL      string      `json:"statuses_url"`
	LanguagesURL     string      `json:"languages_url"`
	StargazersURL    string      `json:"stargazers_url"`
	ContributorsURL  string      `json:"contributors_url"`
	SubscribersURL   string      `json:"subscribers_url"`
	SubscriptionURL  string      `json:"subscription_url"`
	CommitsURL       string      `json:"commits_url"`
	GitCommitsURL    string      `json:"git_commits_url"`
	CommentsURL      string      `json:"comments_url"`
	IssueCommentURL  string      `json:"issue_comment_url"`
	ContentsURL      string      `json:"contents_url"`
	CompareURL       string      `json:"compare_url"`
	MergesURL        string      `json:"merges_url"`
	ArchiveURL       string      `json:"archive_url"`
	DownloadsURL     string      `json:"downloads_url"`
	IssuesURL        string      `json:"issues_url"`
	PullsURL         string      `json:"pulls_url"`
	MilestonesURL    string      `json:"milestones_url"`
	NotificationsURL string      `json:"notifications_url"`
	LabelsURL        string      `json:"labels_url"`
	ReleasesURL      string      `json:"releases_url"`
	DeploymentsURL   string      `json:"deployments_url"`
	CreatedAt        time.Time   `json:"created_at"`
	UpdatedAt        time.Time   `json:"updated_at"`
	PushedAt         time.Time   `json:"pushed_at"`
	GitURL           string      `json:"git_url"`
	SSHURL           string      `json:"ssh_url"`
	CloneURL         string      `json:"clone_url"`
	SvnURL           string      `json:"svn_url"`
	Homepage         *string     `json:"homepage"`
	Size             int         `json:"size"`
	StargazersCount  int         `json:"stargazers_count"`
	WatchersCount    int         `json:"watchers_count"`
	Language         *string     `json:"language"`
	HasIssues        bool        `json:"has_issues"`
	HasProjects      bool        `json:"has_projects"`
	HasDownloads     bool        `json:"has_downloads"`
	HasWiki          bool        `json:"has_wiki"`
	HasPages         bool        `json:"has_pages"`
	ForksCount       int         `json:"forks_count"`
	MirrorURL        interface{} `json:"mirror_url"`
	Archived         bool        `json:"archived"`
	Disabled         bool        `json:"disabled"`
	OpenIssuesCount  int         `json:"open_issues_count"`
	License          *struct {
		Key    string  `json:"key"`
		Name   string  `json:"name"`
		SpdxID string  `json:"spdx_id"`
		URL    *string `json:"url"`
		NodeID string  `json:"node_id"`
	} `json:"license"`
	AllowForking  bool     `json:"allow_forking"`
	IsTemplate    bool     `json:"is_template"`
	Topics        []string `json:"topics"`
	Visibility    string   `json:"visibility"`
	Forks         int      `json:"forks"`
	OpenIssues    int      `json:"open_issues"`
	Watchers      int      `json:"watchers"`
	DefaultBranch string   `json:"default_branch"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.NodeID != "" {
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.FullName != "" {
		const prefix string = ",\"full_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FullName))
	}
	if in.Private {
		const prefix string = ",\"private\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Private))
	}
	if true {
		const prefix string = ",\"owner\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson619ac83dEncode1(out, in.Owner)
	}
	if in.HTMLURL != "" {
		const prefix string = ",\"html_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HTMLURL))
	}
	if in.Description != nil {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Description))
	}
	if in.Fork {
		const prefix string = ",\"fork\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Fork))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if in.ForksURL != "" {
		const prefix string = ",\"forks_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ForksURL))
	}
	if in.KeysURL != "" {
		const prefix string = ",\"keys_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KeysURL))
	}
	if in.CollaboratorsURL != "" {
		const prefix string = ",\"collaborators_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CollaboratorsURL))
	}
	if in.TeamsURL != "" {
		const prefix string = ",\"teams_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TeamsURL))
	}
	if in.HooksURL != "" {
		const prefix string = ",\"hooks_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HooksURL))
	}
	if in.IssueEventsURL != "" {
		const prefix string = ",\"issue_events_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IssueEventsURL))
	}
	if in.EventsURL != "" {
		const prefix string = ",\"events_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventsURL))
	}
	if in.AssigneesURL != "" {
		const prefix string = ",\"assignees_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AssigneesURL))
	}
	if in.BranchesURL != "" {
		const prefix string = ",\"branches_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BranchesURL))
	}
	if in.TagsURL != "" {
		const prefix string = ",\"tags_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TagsURL))
	}
	if in.BlobsURL != "" {
		const prefix string = ",\"blobs_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BlobsURL))
	}
	if in.GitTagsURL != "" {
		const prefix string = ",\"git_tags_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GitTagsURL))
	}
	if in.GitRefsURL != "" {
		const prefix string = ",\"git_refs_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GitRefsURL))
	}
	if in.TreesURL != "" {
		const prefix string = ",\"trees_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TreesURL))
	}
	if in.StatusesURL != "" {
		const prefix string = ",\"statuses_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StatusesURL))
	}
	if in.LanguagesURL != "" {
		const prefix string = ",\"languages_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LanguagesURL))
	}
	if in.StargazersURL != "" {
		const prefix string = ",\"stargazers_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StargazersURL))
	}
	if in.ContributorsURL != "" {
		const prefix string = ",\"contributors_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContributorsURL))
	}
	if in.SubscribersURL != "" {
		const prefix string = ",\"subscribers_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubscribersURL))
	}
	if in.SubscriptionURL != "" {
		const prefix string = ",\"subscription_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubscriptionURL))
	}
	if in.CommitsURL != "" {
		const prefix string = ",\"commits_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CommitsURL))
	}
	if in.GitCommitsURL != "" {
		const prefix string = ",\"git_commits_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GitCommitsURL))
	}
	if in.CommentsURL != "" {
		const prefix string = ",\"comments_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CommentsURL))
	}
	if in.IssueCommentURL != "" {
		const prefix string = ",\"issue_comment_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IssueCommentURL))
	}
	if in.ContentsURL != "" {
		const prefix string = ",\"contents_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContentsURL))
	}
	if in.CompareURL != "" {
		const prefix string = ",\"compare_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CompareURL))
	}
	if in.MergesURL != "" {
		const prefix string = ",\"merges_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MergesURL))
	}
	if in.ArchiveURL != "" {
		const prefix string = ",\"archive_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ArchiveURL))
	}
	if in.DownloadsURL != "" {
		const prefix string = ",\"downloads_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DownloadsURL))
	}
	if in.IssuesURL != "" {
		const prefix string = ",\"issues_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.IssuesURL))
	}
	if in.PullsURL != "" {
		const prefix string = ",\"pulls_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PullsURL))
	}
	if in.MilestonesURL != "" {
		const prefix string = ",\"milestones_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MilestonesURL))
	}
	if in.NotificationsURL != "" {
		const prefix string = ",\"notifications_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NotificationsURL))
	}
	if in.LabelsURL != "" {
		const prefix string = ",\"labels_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LabelsURL))
	}
	if in.ReleasesURL != "" {
		const prefix string = ",\"releases_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReleasesURL))
	}
	if in.DeploymentsURL != "" {
		const prefix string = ",\"deployments_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeploymentsURL))
	}
	if true {
		const prefix string = ",\"created_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"pushed_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.PushedAt).MarshalJSON())
	}
	if in.GitURL != "" {
		const prefix string = ",\"git_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GitURL))
	}
	if in.SSHURL != "" {
		const prefix string = ",\"ssh_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SSHURL))
	}
	if in.CloneURL != "" {
		const prefix string = ",\"clone_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CloneURL))
	}
	if in.SvnURL != "" {
		const prefix string = ",\"svn_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SvnURL))
	}
	if in.Homepage != nil {
		const prefix string = ",\"homepage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Homepage))
	}
	if in.Size != 0 {
		const prefix string = ",\"size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Size))
	}
	if in.StargazersCount != 0 {
		const prefix string = ",\"stargazers_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StargazersCount))
	}
	if in.WatchersCount != 0 {
		const prefix string = ",\"watchers_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WatchersCount))
	}
	if in.Language != nil {
		const prefix string = ",\"language\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Language))
	}
	if in.HasIssues {
		const prefix string = ",\"has_issues\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasIssues))
	}
	if in.HasProjects {
		const prefix string = ",\"has_projects\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasProjects))
	}
	if in.HasDownloads {
		const prefix string = ",\"has_downloads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasDownloads))
	}
	if in.HasWiki {
		const prefix string = ",\"has_wiki\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasWiki))
	}
	if in.HasPages {
		const prefix string = ",\"has_pages\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.HasPages))
	}
	if in.ForksCount != 0 {
		const prefix string = ",\"forks_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ForksCount))
	}
	if in.MirrorURL != nil {
		const prefix string = ",\"mirror_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.MirrorURL.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MirrorURL.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MirrorURL))
		}
	}
	if in.Archived {
		const prefix string = ",\"archived\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Archived))
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Disabled))
	}
	if in.OpenIssuesCount != 0 {
		const prefix string = ",\"open_issues_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OpenIssuesCount))
	}
	if in.License != nil {
		const prefix string = ",\"license\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson619ac83dEncode2(out, *in.License)
	}
	if in.AllowForking {
		const prefix string = ",\"allow_forking\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.AllowForking))
	}
	if in.IsTemplate {
		const prefix string = ",\"is_template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IsTemplate))
	}
	if len(in.Topics) != 0 {
		const prefix string = ",\"topics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Topics {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if in.Visibility != "" {
		const prefix string = ",\"visibility\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Visibility))
	}
	if in.Forks != 0 {
		const prefix string = ",\"forks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Forks))
	}
	if in.OpenIssues != 0 {
		const prefix string = ",\"open_issues\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.OpenIssues))
	}
	if in.Watchers != 0 {
		const prefix string = ",\"watchers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Watchers))
	}
	if in.DefaultBranch != "" {
		const prefix string = ",\"default_branch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultBranch))
	}
	out.RawByte('}')
}
func easyjson619ac83dDecode2(in *jlexer.Lexer, out *struct {
	Key    string  `json:"key"`
	Name   string  `json:"name"`
	SpdxID string  `json:"spdx_id"`
	URL    *string `json:"url"`
	NodeID string  `json:"node_id"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "spdx_id":
			out.SpdxID = string(in.String())
		case "url":
			if in.IsNull() {
				in.Skip()
				out.URL = nil
			} else {
				if out.URL == nil {
					out.URL = new(string)
				}
				*out.URL = string(in.String())
			}
		case "node_id":
			out.NodeID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson619ac83dEncode2(out *jwriter.Writer, in struct {
	Key    string  `json:"key"`
	Name   string  `json:"name"`
	SpdxID string  `json:"spdx_id"`
	URL    *string `json:"url"`
	NodeID string  `json:"node_id"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		const prefix string = ",\"key\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.SpdxID != "" {
		const prefix string = ",\"spdx_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SpdxID))
	}
	if in.URL != nil {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.URL))
	}
	if in.NodeID != "" {
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeID))
	}
	out.RawByte('}')
}
func easyjson619ac83dDecode1(in *jlexer.Lexer, out *struct {
	Login             string `json:"login"`
	ID                int    `json:"id"`
	AvatarURL         string `json:"avatar_url"`
	URL               string `json:"url"`
	HTMLURL           string `json:"html_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	OrganizationsURL  string `json:"organizations_url"`
	ReposURL          string `json:"repos_url"`
	EventsURL         string `json:"events_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	Type              string `json:"type"`
	SiteAdmin         bool   `json:"site_admin"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "html_url":
			out.HTMLURL = string(in.String())
		case "followers_url":
			out.FollowersURL = string(in.String())
		case "following_url":
			out.FollowingURL = string(in.String())
		case "gists_url":
			out.GistsURL = string(in.String())
		case "starred_url":
			out.StarredURL = string(in.String())
		case "subscriptions_url":
			out.SubscriptionsURL = string(in.String())
		case "organizations_url":
			out.OrganizationsURL = string(in.String())
		case "repos_url":
			out.ReposURL = string(in.String())
		case "events_url":
			out.EventsURL = string(in.String())
		case "received_events_url":
			out.ReceivedEventsURL = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "site_admin":
			out.SiteAdmin = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson619ac83dEncode1(out *jwriter.Writer, in struct {
	Login             string `json:"login"`
	ID                int    `json:"id"`
	AvatarURL         string `json:"avatar_url"`
	URL               string `json:"url"`
	HTMLURL           string `json:"html_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	OrganizationsURL  string `json:"organizations_url"`
	ReposURL          string `json:"repos_url"`
	EventsURL         string `json:"events_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	Type              string `json:"type"`
	SiteAdmin         bool   `json:"site_admin"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Login != "" {
		const prefix string = ",\"login\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	if in.AvatarURL != "" {
		const prefix string = ",\"avatar_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvatarURL))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if in.HTMLURL != "" {
		const prefix string = ",\"html_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HTMLURL))
	}
	if in.FollowersURL != "" {
		const prefix string = ",\"followers_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FollowersURL))
	}
	if in.FollowingURL != "" {
		const prefix string = ",\"following_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FollowingURL))
	}
	if in.GistsURL != "" {
		const prefix string = ",\"gists_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GistsURL))
	}
	if in.StarredURL != "" {
		const prefix string = ",\"starred_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StarredURL))
	}
	if in.SubscriptionsURL != "" {
		const prefix string = ",\"subscriptions_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SubscriptionsURL))
	}
	if in.OrganizationsURL != "" {
		const prefix string = ",\"organizations_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OrganizationsURL))
	}
	if in.ReposURL != "" {
		const prefix string = ",\"repos_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReposURL))
	}
	if in.EventsURL != "" {
		const prefix string = ",\"events_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.EventsURL))
	}
	if in.ReceivedEventsURL != "" {
		const prefix string = ",\"received_events_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ReceivedEventsURL))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.SiteAdmin {
		const prefix string = ",\"site_admin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SiteAdmin))
	}
	out.RawByte('}')
}
