// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package github

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9e1087fdDecodeGitTcpDirectKayosUrastarGithub(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "id":
			out.Id = int(in.Int())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "url":
			out.Url = string(in.String())
		case "html_url":
			out.HTMLURL = string(in.String())
		case "followers_url":
			out.FollowersUrl = string(in.String())
		case "following_url":
			out.FollowingUrl = string(in.String())
		case "gists_url":
			out.GistsUrl = string(in.String())
		case "starred_url":
			out.StarredUrl = string(in.String())
		case "subscriptions_url":
			out.SubscriptionsUrl = string(in.String())
		case "organizations_url":
			out.OrganizationsUrl = string(in.String())
		case "repos_url":
			out.ReposUrl = string(in.String())
		case "events_url":
			out.EventsUrl = string(in.String())
		case "received_events_url":
			out.ReceivedEventsUrl = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "site_admin":
			out.SiteAdmin = bool(in.Bool())
		case "name":
			out.Name = string(in.String())
		case "company":
			out.Company = string(in.String())
		case "blog":
			out.Blog = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "email":
			if m, ok := out.Email.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Email.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Email = in.Interface()
			}
		case "hireable":
			if m, ok := out.Hireable.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Hireable.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Hireable = in.Interface()
			}
		case "bio":
			if m, ok := out.Bio.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Bio.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Bio = in.Interface()
			}
		case "twitter_username":
			out.TwitterUsername = string(in.String())
		case "public_repos":
			out.PublicRepos = int(in.Int())
		case "public_gists":
			out.PublicGists = int(in.Int())
		case "followers":
			out.Followers = int(in.Int())
		case "following":
			out.Following = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeGitTcpDirectKayosUrastarGithub(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HTMLURL))
	}
	{
		const prefix string = ",\"followers_url\":"
		out.RawString(prefix)
		out.String(string(in.FollowersUrl))
	}
	{
		const prefix string = ",\"following_url\":"
		out.RawString(prefix)
		out.String(string(in.FollowingUrl))
	}
	{
		const prefix string = ",\"gists_url\":"
		out.RawString(prefix)
		out.String(string(in.GistsUrl))
	}
	{
		const prefix string = ",\"starred_url\":"
		out.RawString(prefix)
		out.String(string(in.StarredUrl))
	}
	{
		const prefix string = ",\"subscriptions_url\":"
		out.RawString(prefix)
		out.String(string(in.SubscriptionsUrl))
	}
	{
		const prefix string = ",\"organizations_url\":"
		out.RawString(prefix)
		out.String(string(in.OrganizationsUrl))
	}
	{
		const prefix string = ",\"repos_url\":"
		out.RawString(prefix)
		out.String(string(in.ReposUrl))
	}
	{
		const prefix string = ",\"events_url\":"
		out.RawString(prefix)
		out.String(string(in.EventsUrl))
	}
	{
		const prefix string = ",\"received_events_url\":"
		out.RawString(prefix)
		out.String(string(in.ReceivedEventsUrl))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"site_admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.SiteAdmin))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"company\":"
		out.RawString(prefix)
		out.String(string(in.Company))
	}
	{
		const prefix string = ",\"blog\":"
		out.RawString(prefix)
		out.String(string(in.Blog))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		if m, ok := in.Email.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Email.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Email))
		}
	}
	{
		const prefix string = ",\"hireable\":"
		out.RawString(prefix)
		if m, ok := in.Hireable.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Hireable.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Hireable))
		}
	}
	{
		const prefix string = ",\"bio\":"
		out.RawString(prefix)
		if m, ok := in.Bio.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Bio.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Bio))
		}
	}
	{
		const prefix string = ",\"twitter_username\":"
		out.RawString(prefix)
		out.String(string(in.TwitterUsername))
	}
	{
		const prefix string = ",\"public_repos\":"
		out.RawString(prefix)
		out.Int(int(in.PublicRepos))
	}
	{
		const prefix string = ",\"public_gists\":"
		out.RawString(prefix)
		out.Int(int(in.PublicGists))
	}
	{
		const prefix string = ",\"followers\":"
		out.RawString(prefix)
		out.Int(int(in.Followers))
	}
	{
		const prefix string = ",\"following\":"
		out.RawString(prefix)
		out.Int(int(in.Following))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeGitTcpDirectKayosUrastarGithub(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeGitTcpDirectKayosUrastarGithub(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeGitTcpDirectKayosUrastarGithub(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeGitTcpDirectKayosUrastarGithub(l, v)
}
